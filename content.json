{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://juzzing2.github.io.com"},"pages":[],"posts":[{"title":"promise와 async/wait 비교","slug":"promise란","date":"2018-11-05T11:21:24.000Z","updated":"2018-11-23T02:11:24.000Z","comments":true,"path":"2018/11/05/promise란/","link":"","permalink":"http://juzzing2.github.io.com/2018/11/05/promise란/","excerpt":"","text":"promise- ES6 문법- resolve 결과가 then, reject가 catch문으로 가게 됨 async/await- ES8 문법- 코드의 간결성- 동기식으로 처리 차이점 정리 1. 에러처리 promise문에서 getJSON을 통해서 데이터를 받아오는 부분과 JSON.parse하는 부분에서 catch문을 사용해서 에러를 잡아야한다. 반면에 async/await 구문에서는 try, catch에서 모든 에러를 다 한번에 잡을 수 있다. 코드가 훨씬 깔끔해질 수 있다. 그러나 실무에서 에러가 발생할때 정확하게 어느 구문에서 발생했는지 알 수 없다. 123456789101112makerequest = () =&gt; &#123; try &#123; this.getJSON('a') .then(result =&gt;&#123; const data = JSON.parse(result); &#125;).catch((err) =&gt; &#123; console.log(1, err) &#125;) &#125; catch(err) &#123; console.log(2, err) &#125;&#125; 12345678makerequest = async() =&gt; &#123; try &#123; JSON.parse(await this.getJSON('a')) &#125; catch (err) &#123; console.log(\"Err\", err) &#125;&#125; 2. 중간값 처리 예를 들어서 사용자의 정보를 받아온 다음 그 정보를 바탕으로 새로운 api를 호출해야하는 경우가 있다. 이 경우 async/await를 사용하면 좀 더 편하게 코드를 짤 수 있다. 사실 이부분이 async/await를 사용하는 가장 큰 이유라고 생각한다. 12345678910makeRequest = () =&gt; &#123; return this.getJSON() .then(data =&gt; &#123; return this.makeAnotherRequest(data) .then(moreData =&gt; &#123; console.log(moreData) return moreData &#125;); &#125;)&#125; 12345makeRequest = async() =&gt; &#123; const data = await this.getJSON() const moreData = await this.makeAnotherRequest(data) console.log(moreData)&#125; 3. 디버깅 promise는 then블록 내에 디버깅을 찍으면 동기적으로 이동하기 때문에 다음 then으로 이동하지 않는다. 반면 async/await는 바로 다음 await로 이동을 하기 때문에 디버깅하는데 편리하다. 결론 promise를 대체해서 어떤 경우에서든지 async/await를 사용하는 것을 좋지 않다. 새로운 문법들이 계속 등장하는데 꼭 좋은 것만은 아니라고 한다. 적재적소로 필요할 때 사용하는게 제일 좋다. 본인한테 맞고 잘 사용할 수 있는게 좋다. 새로운 것들이 등장하는 것은 단지 이용을 편리하게 해주는것이므로…","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-11-02T04:39:39.000Z","updated":"2018-11-02T04:39:39.000Z","comments":true,"path":"2018/11/02/hello-world/","link":"","permalink":"http://juzzing2.github.io.com/2018/11/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}